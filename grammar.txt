program := BOF decl* EOF
decl := macro_invoke | function

macro_invoke := macro_name macro_args t_semi
macro_name := ident_path "!"
macro_args := t_left_paren tt* t_right_paren | t_left_brace tt* t_right_brace | t_left_bracket tt* t_right_bracket

//TODO: Semantics: if no return_unit is provided the return type is "()". To
// support this in the grammar, we should actually allow specifying types.
// The types we support are: numbers (with units or unitless), bool, ()
// For the time being, we are just representing this with None.

function := attribute* "fn" ident? fnargs return_unit? block
fnargs := t_left_paren (fnarg t_comma)* fnarg? t_right_paren
fnarg := ident compound_unit?
return_unit := t_arrow compound_unit
// attributes consume all text/tokens until a *matching* `]` is found.
// "matching" means that `[stuff=[]]` should parse in its entirety
attribute := t_hash t_left_bracket ident tt* t_right_bracket
block := t_left_brace statement* expr? t_right_brace
statement := function | var_decl | expr t_semi
var_decl := t_let ident compound_unit? t_becomes expr t_semi

// Precedence: (), compound_unit, ^, *, /, %, +, -
expr := term | expr (t_plus | t_minus) term
term := pow | term (t_star | t_slash | t_percent) pow
pow := factor | pow t_caret factor
factor := factor t_as compound_unit | numeric_literal compound_unit?
        | fncall compound_unit? | ident_path compound_unit?
        | t_left_paren expr t_right_paren compound_unit? | block compound_unit?
        | t_return expr | t_unit // t_unit = (), not a "unit"
fncall := ident_path t_left_paren (expr t_comma)* expr? t_right_paren

// A compound_unit is an expr with ONLY units, constant operators,
// and a limited set of operators: multiplication, division, and exponentiation
// We support `'m 's^-2` as an alias for `'m * 's^-2` (see first rule below)
// This sort of multiplication is only for units, not for general expressions
// i.e. `'cm ^ -3 / 'L` but not `2 'cm`
// Precedence: (), ^, *, /
compound_unit := unitterm+
unitterm := unitpow | unitterm (t_star | t_slash) unitpow
unitpow := unitfactor | unitpow t_caret integer_literal
unitfactor := unit | t_left_paren compound_unit t_right_paren

// units cannot start with "_" but are otherwise identical to ident
unit := "'" alpha (alpha | digit | "_")*
ident_path := ident ("::" ident)*
//TODO: Disable keywords && ident != "_"
ident := (alpha | "_") (alpha | digit | "_")*

// We have different literals, but all numbers are expressed exactly using a
// decimal/rational number data type
numeric_literal := float_literal | integer_literal
float_literal := sign? float_body float_exp?
float_body := (digit+ "." digit*) | (digit* "." digit+)
float_exp := ("e" | "E") sign? digit+
integer_literal := sign? digit+
sign := "+" | "-"

// Tokens
t_left_brace := "{"
t_right_brace := "}"
t_left_paren := "("
t_right_paren := ")"
t_left_bracket := "["
t_right_bracket := "]"
t_plus := "+"
t_minus := "-"
t_star := "*"
t_slash := "/"
t_percent := "%"
t_caret := "^"
t_comma := ","
t_hash := "#"
t_semi := ";"
t_return := "return"
t_unit := "()"
t_as := "as"
t_arrow := "->"
t_let := "let"
t_becomes := "="

// tt = token tree (any tokens)
tt :=
    t_left_paren tt* t_right_paren |
    t_left_bracket tt* t_right_bracket |
    t_left_brace tt* t_right_brace |
    macro_invoke |
    function |
    attribute |
    block |
    expr |
    compound_unit |
    ident_path |
    numeric_literal |
    t_plus |
    t_minus |
    t_star |
    t_slash |
    t_percent |
    t_caret |
    t_comma |
    t_hash |
    t_semi |
    t_return |
    t_unit |
    t_as |
    t_arrow |
    t_let |
    t_becomes

newline := "\n" | "\r\n"
whitespace := " " | "\t" | newline
comment := "//" (!newline)*
