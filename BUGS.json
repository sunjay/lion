{
  "data": {
    "repository": {
      "issues": {
        "totalCount": 3,
        "nodes": [
          {
            "author": {
              "avatarUrl": "https://avatars2.githubusercontent.com/u/530939?v=4",
              "login": "sunjay",
              "resourcePath": "/sunjay",
              "url": "https://github.com/sunjay"
            },
            "authorAssociation": "OWNER",
            "body": "Automatic unit conversions in boolean operators are causing weird behaviour.\n\nExamples:\n\n```\nλ 2 + 3 deg\n5\nλ 3 deg + 2\n3 deg\nλ 3 < 2 deg\nfalse\n```\n\nThe culprits are lines like the one here: [numeric.rs#L128](https://github.com/sunjay/lion/blob/master/src/prelude/numeric.rs#L128)\n\n``` rust\nrhs = try!(context.convert(rhs, lhs.unit)).unwrap_number();\n```\n\nPossible solutions:\n- Make `context.convert` reject conversions too and from no unit and force usage the explicit functions for getting a number without a unit or adding a unit to a unitless value (recommended)\n  - This is preferable because it doesn't force the person using convert to always check if a conversion is possible\n  - Explicitly forces many bugs to be avoided\n  - Part of this change would be preventing convert from accepting None as an argument\n- Adding a guard before each `convert(...)` call preventing conversions to and from no unit (not preferred)\n  - Error prone and adds potential for future bugs\n\nThere may be an opportunity to generalize how units are coerced in functions, maybe even making a `coerceUnit` built-in function that returns an `Err()` if the units cannot be coerced into the same unit? More useful than coerce would be a function for making sure the given arguments are numbers or any other type.\n\nTODO:\n- [ ] Fix bug, preferably in the recommended way above\n- [ ] Regression tests in prelude (for binary operators) and EvalContext (for convert)\n",
            "bodyHTML": "<p>Automatic unit conversions in boolean operators are causing weird behaviour.</p>\n<p>Examples:</p>\n<pre><code>λ 2 + 3 deg\n5\nλ 3 deg + 2\n3 deg\nλ 3 &lt; 2 deg\nfalse\n</code></pre>\n<p>The culprits are lines like the one here: <a href=\"https://github.com/sunjay/lion/blob/master/src/prelude/numeric.rs#L128\">numeric.rs#L128</a></p>\n<div class=\"highlight highlight-source-rust\"><pre>rhs <span class=\"pl-k\">=</span> <span class=\"pl-c1\">try!</span>(context.<span class=\"pl-en\">convert</span>(rhs, lhs.unit)).<span class=\"pl-en\">unwrap_number</span>();</pre></div>\n<p>Possible solutions:</p>\n<ul>\n<li>Make <code>context.convert</code> reject conversions too and from no unit and force usage the explicit functions for getting a number without a unit or adding a unit to a unitless value (recommended)\n<ul>\n<li>This is preferable because it doesn't force the person using convert to always check if a conversion is possible</li>\n<li>Explicitly forces many bugs to be avoided</li>\n<li>Part of this change would be preventing convert from accepting None as an argument</li>\n</ul>\n</li>\n<li>Adding a guard before each <code>convert(...)</code> call preventing conversions to and from no unit (not preferred)\n<ul>\n<li>Error prone and adds potential for future bugs</li>\n</ul>\n</li>\n</ul>\n<p>There may be an opportunity to generalize how units are coerced in functions, maybe even making a <code>coerceUnit</code> built-in function that returns an <code>Err()</code> if the units cannot be coerced into the same unit? More useful than coerce would be a function for making sure the given arguments are numbers or any other type.</p>\n<p>TODO:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> Fix bug, preferably in the recommended way above</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> Regression tests in prelude (for binary operators) and EvalContext (for convert)</li>\n</ul>",
            "bodyText": "Automatic unit conversions in boolean operators are causing weird behaviour.\nExamples:\nλ 2 + 3 deg\n5\nλ 3 deg + 2\n3 deg\nλ 3 < 2 deg\nfalse\n\nThe culprits are lines like the one here: numeric.rs#L128\nrhs = try!(context.convert(rhs, lhs.unit)).unwrap_number();\nPossible solutions:\n\nMake context.convert reject conversions too and from no unit and force usage the explicit functions for getting a number without a unit or adding a unit to a unitless value (recommended)\n\nThis is preferable because it doesn't force the person using convert to always check if a conversion is possible\nExplicitly forces many bugs to be avoided\nPart of this change would be preventing convert from accepting None as an argument\n\n\nAdding a guard before each convert(...) call preventing conversions to and from no unit (not preferred)\n\nError prone and adds potential for future bugs\n\n\n\nThere may be an opportunity to generalize how units are coerced in functions, maybe even making a coerceUnit built-in function that returns an Err() if the units cannot be coerced into the same unit? More useful than coerce would be a function for making sure the given arguments are numbers or any other type.\nTODO:\n\n Fix bug, preferably in the recommended way above\n Regression tests in prelude (for binary operators) and EvalContext (for convert)",
            "closed": false,
            "createdAt": "2016-07-07T20:09:05Z",
            "createdViaEmail": false,
            "databaseId": 164395966,
            "editor": null,
            "labels": {
              "edges": [
                {
                  "node": {
                    "id": "MDU6TGFiZWw0MDg5NDc4MjE="
                  }
                },
                {
                  "node": {
                    "id": "MDU6TGFiZWw0MDg5NDc4MDM="
                  }
                },
                {
                  "node": {
                    "id": "MDU6TGFiZWw0MDg5NDc4MTQ="
                  }
                }
              ]
            },
            "lastEditedAt": null,
            "locked": false,
            "milestone": {
              "id": "MDk6TWlsZXN0b25lMTk1MzE5NQ=="
            },
            "number": 1,
            "publishedAt": "2016-07-07T20:09:05Z",
            "reactionGroups": [
              {
                "content": "THUMBS_UP",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "LAUGH",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "HOORAY",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "CONFUSED",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "HEART",
                "createdAt": null,
                "viewerHasReacted": false
              }
            ],
            "repository": {
              "id": "MDEwOlJlcG9zaXRvcnk1MDI5ODMyNw=="
            },
            "resourcePath": "/sunjay/lion/issues/1",
            "state": "OPEN",
            "title": "Units are automatically coerced away during numeric operators",
            "updatedAt": "2016-08-20T20:38:39Z",
            "url": "https://github.com/sunjay/lion/issues/1",
            "viewerCanReact": true,
            "viewerCanSubscribe": true,
            "viewerCanUpdate": true,
            "viewerCannotUpdateReasons": [],
            "viewerDidAuthor": true,
            "viewerSubscription": "SUBSCRIBED"
          },
          {
            "author": {
              "avatarUrl": "https://avatars2.githubusercontent.com/u/530939?v=4",
              "login": "sunjay",
              "resourcePath": "/sunjay",
              "url": "https://github.com/sunjay"
            },
            "authorAssociation": "OWNER",
            "body": "The units implementation was done in quite a hurry without a full understanding of the problem. Thus, it isn't that great at representing most units.\n\nSome examples of things we don't really support:\n- `2 m * 3 m = 6 m ^ 2`\n- `(2 kg * m * s ^ -2) = 2 N`\n- and many more very basic needs\n\nUnits in most of their usage are not just simple names attached to things. Often they are complete expressions with multiplication, division and even exponentiation. \n\nExample: `kg * m / s ^ 2` or `kg * ms ^ -2`\n- `k` - represents a multiplication by `10^3`\n- `g` - \"gram\" - the base unit for mass in the SI system\n- `m` - \"metre\" - the base unit for length in the SI system\n- `s` - \"second\" - the base unit for time in the SI system\n- `^ -2` - raising `s` to the power of `-2` or in other words dividing the whole unit by `s^2`\n\nThis _expression_ for a unit is also equivalent to a `Newton (N)`.\n\nThere is a whole [table of SI prefixes](https://en.wikipedia.org/wiki/Metric_prefix#List_of_SI_prefixes).\n\nThere is a whole set of imperial units as well.\n\nThe new system for units should be integratable into the current codebase without rewriting the entire interpreter. \n## Some requirements:\n- [ ] Easy way to define an entire SI base unit (Ex: `defineSIUnit \"m\"`)\n  - generates every prefix on the SI prefix table\n  - defines the backwards conversions as well\n- [ ] length/distance units (`m`, `inch`, etc.)\n- [ ] time units (`seconds`, `hours`, `years`) - not months\n- [ ] mass units (`gram`, `pound`, etc.)\n- [ ] area units (`m ^ 2`, `square inch`, etc.)\n- [ ] electrical units (`Ohm`, `Volt`, `Ampere`, etc.)\n  - should not need to be explicitly defined for every possible permutation\n- [ ] volume units (`m ^ 3`, `Litre`, `cubic inch`, etc.)\n  - should not need to be explicitly defined for every possible permutation\n- [ ] unit equivalence\n  - i.e. defining a unit as an expression of other units and then being able to convert to other units from there\n  \n  ```\n  λ defineUnit \"N\"\n  λ defineUnitEquivalence \"N\" (kg * m * s ^ -2)\n  λ 2 N + (2 kg * m * s^-2)\n  = 4\n  ```\n- [ ] equivalent units are equivalent based on mathematical laws\n  - i.e. the multiplication of units is equivalent despite unit ordering `kg * m * s` is equivalent to `m * kg * s`\n- [ ] expression based operations rather than numeric operators\n  - i.e. `4 m * 2 m = 8 m ^ 2`\n- [ ] forwards and backwards conversion functions\n## Implementation Details:\n- Compound unit names like `kg` must still be defined (even automatically through `defineSIUnit`)\n  - This is because we could potentially force people to write `k * g` but that isn't very ergonomic\n  - Any shortcuts should be defined somewhat explicitly so that it is easy to override them afterwards\n- Expressions just reduce down to different expressions (i.e. the stopping criteria for evaluation changes)\n- This means functions can now return expression trees\n- This changes the representation of a unit name to a special callable type\n- The callable type can either be called on a value, or used in an expression as the representation of its own default value (usually 1)\n  - Example: `m` can be used as a converter in `2 m` or as `1 m` if it is used without any arguments in something like `kg * m * s ^ -2`\n  - To implement this, we may need unit functions to return a function if they are used with functions as their argument\n    - This is important because something like `kg * m` will return a tree with kg applied to no arguments (so `1 kg` as stated above) and `m` applied to `*`\n    - For all of this to work, `m` should return `*` partially applied to `1 m` instead\n    - This might need `^` to get higher precedence than function evaluation so that `8 m ^ 2` doesn't get grouped as `(8 m) ^ 2` and is instead grouped as `8 (m ^ 2)`\n- This changes strict evaluation from aiming for a value to aiming for a reduced expression\n  - When reducing incompatible units, multiplication and division can be performed, but not addition\n    - I.e. `1 kg + (2 kg * m * s ^ -2) => 1 kg + (2 kg * m * s ^ -2)` and `1 kg / (2 kg * m * s ^ -2) => 0.5 m ^ -1 * s ^ 2`\n",
            "bodyHTML": "<p>The units implementation was done in quite a hurry without a full understanding of the problem. Thus, it isn't that great at representing most units.</p>\n<p>Some examples of things we don't really support:</p>\n<ul>\n<li><code>2 m * 3 m = 6 m ^ 2</code></li>\n<li><code>(2 kg * m * s ^ -2) = 2 N</code></li>\n<li>and many more very basic needs</li>\n</ul>\n<p>Units in most of their usage are not just simple names attached to things. Often they are complete expressions with multiplication, division and even exponentiation.</p>\n<p>Example: <code>kg * m / s ^ 2</code> or <code>kg * ms ^ -2</code></p>\n<ul>\n<li><code>k</code> - represents a multiplication by <code>10^3</code></li>\n<li><code>g</code> - \"gram\" - the base unit for mass in the SI system</li>\n<li><code>m</code> - \"metre\" - the base unit for length in the SI system</li>\n<li><code>s</code> - \"second\" - the base unit for time in the SI system</li>\n<li><code>^ -2</code> - raising <code>s</code> to the power of <code>-2</code> or in other words dividing the whole unit by <code>s^2</code></li>\n</ul>\n<p>This <em>expression</em> for a unit is also equivalent to a <code>Newton (N)</code>.</p>\n<p>There is a whole <a href=\"https://en.wikipedia.org/wiki/Metric_prefix#List_of_SI_prefixes\">table of SI prefixes</a>.</p>\n<p>There is a whole set of imperial units as well.</p>\n<p>The new system for units should be integratable into the current codebase without rewriting the entire interpreter.</p>\n<h2>Some requirements:</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> Easy way to define an entire SI base unit (Ex: <code>defineSIUnit \"m\"</code>)</p>\n<ul>\n<li>generates every prefix on the SI prefix table</li>\n<li>defines the backwards conversions as well</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> length/distance units (<code>m</code>, <code>inch</code>, etc.)</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> time units (<code>seconds</code>, <code>hours</code>, <code>years</code>) - not months</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> mass units (<code>gram</code>, <code>pound</code>, etc.)</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> area units (<code>m ^ 2</code>, <code>square inch</code>, etc.)</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> electrical units (<code>Ohm</code>, <code>Volt</code>, <code>Ampere</code>, etc.)</p>\n<ul>\n<li>should not need to be explicitly defined for every possible permutation</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> volume units (<code>m ^ 3</code>, <code>Litre</code>, <code>cubic inch</code>, etc.)</p>\n<ul>\n<li>should not need to be explicitly defined for every possible permutation</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> unit equivalence</p>\n<ul>\n<li>i.e. defining a unit as an expression of other units and then being able to convert to other units from there</li>\n</ul>\n<pre><code>λ defineUnit \"N\"\nλ defineUnitEquivalence \"N\" (kg * m * s ^ -2)\nλ 2 N + (2 kg * m * s^-2)\n= 4\n</code></pre>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> equivalent units are equivalent based on mathematical laws</p>\n<ul>\n<li>i.e. the multiplication of units is equivalent despite unit ordering <code>kg * m * s</code> is equivalent to <code>m * kg * s</code></li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> expression based operations rather than numeric operators</p>\n<ul>\n<li>i.e. <code>4 m * 2 m = 8 m ^ 2</code></li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> forwards and backwards conversion functions</p>\n</li>\n</ul>\n<h2>Implementation Details:</h2>\n<ul>\n<li>Compound unit names like <code>kg</code> must still be defined (even automatically through <code>defineSIUnit</code>)\n<ul>\n<li>This is because we could potentially force people to write <code>k * g</code> but that isn't very ergonomic</li>\n<li>Any shortcuts should be defined somewhat explicitly so that it is easy to override them afterwards</li>\n</ul>\n</li>\n<li>Expressions just reduce down to different expressions (i.e. the stopping criteria for evaluation changes)</li>\n<li>This means functions can now return expression trees</li>\n<li>This changes the representation of a unit name to a special callable type</li>\n<li>The callable type can either be called on a value, or used in an expression as the representation of its own default value (usually 1)\n<ul>\n<li>Example: <code>m</code> can be used as a converter in <code>2 m</code> or as <code>1 m</code> if it is used without any arguments in something like <code>kg * m * s ^ -2</code></li>\n<li>To implement this, we may need unit functions to return a function if they are used with functions as their argument\n<ul>\n<li>This is important because something like <code>kg * m</code> will return a tree with kg applied to no arguments (so <code>1 kg</code> as stated above) and <code>m</code> applied to <code>*</code></li>\n<li>For all of this to work, <code>m</code> should return <code>*</code> partially applied to <code>1 m</code> instead</li>\n<li>This might need <code>^</code> to get higher precedence than function evaluation so that <code>8 m ^ 2</code> doesn't get grouped as <code>(8 m) ^ 2</code> and is instead grouped as <code>8 (m ^ 2)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>This changes strict evaluation from aiming for a value to aiming for a reduced expression\n<ul>\n<li>When reducing incompatible units, multiplication and division can be performed, but not addition\n<ul>\n<li>I.e. <code>1 kg + (2 kg * m * s ^ -2) =&gt; 1 kg + (2 kg * m * s ^ -2)</code> and <code>1 kg / (2 kg * m * s ^ -2) =&gt; 0.5 m ^ -1 * s ^ 2</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>",
            "bodyText": "The units implementation was done in quite a hurry without a full understanding of the problem. Thus, it isn't that great at representing most units.\nSome examples of things we don't really support:\n\n2 m * 3 m = 6 m ^ 2\n(2 kg * m * s ^ -2) = 2 N\nand many more very basic needs\n\nUnits in most of their usage are not just simple names attached to things. Often they are complete expressions with multiplication, division and even exponentiation.\nExample: kg * m / s ^ 2 or kg * ms ^ -2\n\nk - represents a multiplication by 10^3\ng - \"gram\" - the base unit for mass in the SI system\nm - \"metre\" - the base unit for length in the SI system\ns - \"second\" - the base unit for time in the SI system\n^ -2 - raising s to the power of -2 or in other words dividing the whole unit by s^2\n\nThis expression for a unit is also equivalent to a Newton (N).\nThere is a whole table of SI prefixes.\nThere is a whole set of imperial units as well.\nThe new system for units should be integratable into the current codebase without rewriting the entire interpreter.\nSome requirements:\n\n\n Easy way to define an entire SI base unit (Ex: defineSIUnit \"m\")\n\ngenerates every prefix on the SI prefix table\ndefines the backwards conversions as well\n\n\n\n length/distance units (m, inch, etc.)\n\n\n time units (seconds, hours, years) - not months\n\n\n mass units (gram, pound, etc.)\n\n\n area units (m ^ 2, square inch, etc.)\n\n\n electrical units (Ohm, Volt, Ampere, etc.)\n\nshould not need to be explicitly defined for every possible permutation\n\n\n\n volume units (m ^ 3, Litre, cubic inch, etc.)\n\nshould not need to be explicitly defined for every possible permutation\n\n\n\n unit equivalence\n\ni.e. defining a unit as an expression of other units and then being able to convert to other units from there\n\nλ defineUnit \"N\"\nλ defineUnitEquivalence \"N\" (kg * m * s ^ -2)\nλ 2 N + (2 kg * m * s^-2)\n= 4\n\n\n\n equivalent units are equivalent based on mathematical laws\n\ni.e. the multiplication of units is equivalent despite unit ordering kg * m * s is equivalent to m * kg * s\n\n\n\n expression based operations rather than numeric operators\n\ni.e. 4 m * 2 m = 8 m ^ 2\n\n\n\n forwards and backwards conversion functions\n\n\nImplementation Details:\n\nCompound unit names like kg must still be defined (even automatically through defineSIUnit)\n\nThis is because we could potentially force people to write k * g but that isn't very ergonomic\nAny shortcuts should be defined somewhat explicitly so that it is easy to override them afterwards\n\n\nExpressions just reduce down to different expressions (i.e. the stopping criteria for evaluation changes)\nThis means functions can now return expression trees\nThis changes the representation of a unit name to a special callable type\nThe callable type can either be called on a value, or used in an expression as the representation of its own default value (usually 1)\n\nExample: m can be used as a converter in 2 m or as 1 m if it is used without any arguments in something like kg * m * s ^ -2\nTo implement this, we may need unit functions to return a function if they are used with functions as their argument\n\nThis is important because something like kg * m will return a tree with kg applied to no arguments (so 1 kg as stated above) and m applied to *\nFor all of this to work, m should return * partially applied to 1 m instead\nThis might need ^ to get higher precedence than function evaluation so that 8 m ^ 2 doesn't get grouped as (8 m) ^ 2 and is instead grouped as 8 (m ^ 2)\n\n\n\n\nThis changes strict evaluation from aiming for a value to aiming for a reduced expression\n\nWhen reducing incompatible units, multiplication and division can be performed, but not addition\n\nI.e. 1 kg + (2 kg * m * s ^ -2) => 1 kg + (2 kg * m * s ^ -2) and 1 kg / (2 kg * m * s ^ -2) => 0.5 m ^ -1 * s ^ 2",
            "closed": false,
            "createdAt": "2016-08-20T20:37:07Z",
            "createdViaEmail": false,
            "databaseId": 172289618,
            "editor": {
              "avatarUrl": "https://avatars2.githubusercontent.com/u/530939?v=4",
              "login": "sunjay",
              "resourcePath": "/sunjay",
              "url": "https://github.com/sunjay"
            },
            "labels": {
              "edges": [
                {
                  "node": {
                    "id": "MDU6TGFiZWw0MDg5NDc4MjE="
                  }
                },
                {
                  "node": {
                    "id": "MDU6TGFiZWw0MDg5NDc4MDM="
                  }
                },
                {
                  "node": {
                    "id": "MDU6TGFiZWw0MDg5NDc4MTM="
                  }
                }
              ]
            },
            "lastEditedAt": "2016-08-21T06:24:56Z",
            "locked": false,
            "milestone": {
              "id": "MDk6TWlsZXN0b25lMTk1MzE5NQ=="
            },
            "number": 2,
            "publishedAt": "2016-08-20T20:37:07Z",
            "reactionGroups": [
              {
                "content": "THUMBS_UP",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "LAUGH",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "HOORAY",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "CONFUSED",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "HEART",
                "createdAt": null,
                "viewerHasReacted": false
              }
            ],
            "repository": {
              "id": "MDEwOlJlcG9zaXRvcnk1MDI5ODMyNw=="
            },
            "resourcePath": "/sunjay/lion/issues/2",
            "state": "OPEN",
            "title": "Units Implementation is not sufficient",
            "updatedAt": "2016-08-21T06:24:56Z",
            "url": "https://github.com/sunjay/lion/issues/2",
            "viewerCanReact": true,
            "viewerCanSubscribe": true,
            "viewerCanUpdate": true,
            "viewerCannotUpdateReasons": [],
            "viewerDidAuthor": true,
            "viewerSubscription": "SUBSCRIBED"
          },
          {
            "author": {
              "avatarUrl": "https://avatars2.githubusercontent.com/u/530939?v=4",
              "login": "sunjay",
              "resourcePath": "/sunjay",
              "url": "https://github.com/sunjay"
            },
            "authorAssociation": "OWNER",
            "body": "Parser doesn't account for empty strings. Ends up with an index error.\n\n```\nλ \"\"\nthread '<main>' panicked at 'index out of bounds: the len is 2 but the index is 2', src/parser/parser.rs:215\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nerror: Process didn't exit successfully: `target/debug/lion` (exit code: 101)\n```\n## TODO\n- [ ] Fix bug\n- [ ] Add regression test to ensure it doesn't happen again\n",
            "bodyHTML": "<p>Parser doesn't account for empty strings. Ends up with an index error.</p>\n<pre><code>λ \"\"\nthread '&lt;main&gt;' panicked at 'index out of bounds: the len is 2 but the index is 2', src/parser/parser.rs:215\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nerror: Process didn't exit successfully: `target/debug/lion` (exit code: 101)\n</code></pre>\n<h2>TODO</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> Fix bug</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"\"> Add regression test to ensure it doesn't happen again</li>\n</ul>",
            "bodyText": "Parser doesn't account for empty strings. Ends up with an index error.\nλ \"\"\nthread '<main>' panicked at 'index out of bounds: the len is 2 but the index is 2', src/parser/parser.rs:215\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nerror: Process didn't exit successfully: `target/debug/lion` (exit code: 101)\n\nTODO\n\n Fix bug\n Add regression test to ensure it doesn't happen again",
            "closed": false,
            "createdAt": "2016-08-27T06:49:01Z",
            "createdViaEmail": false,
            "databaseId": 173581826,
            "editor": {
              "avatarUrl": "https://avatars2.githubusercontent.com/u/530939?v=4",
              "login": "sunjay",
              "resourcePath": "/sunjay",
              "url": "https://github.com/sunjay"
            },
            "labels": {
              "edges": [
                {
                  "node": {
                    "id": "MDU6TGFiZWw0MDg5NDc4MTk="
                  }
                },
                {
                  "node": {
                    "id": "MDU6TGFiZWw0MDg5NDc4MDM="
                  }
                },
                {
                  "node": {
                    "id": "MDU6TGFiZWw0MDg5NDc4MTQ="
                  }
                }
              ]
            },
            "lastEditedAt": "2016-08-27T06:50:48Z",
            "locked": false,
            "milestone": {
              "id": "MDk6TWlsZXN0b25lMTk1MzE5NQ=="
            },
            "number": 3,
            "publishedAt": "2016-08-27T06:49:01Z",
            "reactionGroups": [
              {
                "content": "THUMBS_UP",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "THUMBS_DOWN",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "LAUGH",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "HOORAY",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "CONFUSED",
                "createdAt": null,
                "viewerHasReacted": false
              },
              {
                "content": "HEART",
                "createdAt": null,
                "viewerHasReacted": false
              }
            ],
            "repository": {
              "id": "MDEwOlJlcG9zaXRvcnk1MDI5ODMyNw=="
            },
            "resourcePath": "/sunjay/lion/issues/3",
            "state": "OPEN",
            "title": "Empty String Causes Error",
            "updatedAt": "2016-08-27T06:50:48Z",
            "url": "https://github.com/sunjay/lion/issues/3",
            "viewerCanReact": true,
            "viewerCanSubscribe": true,
            "viewerCanUpdate": true,
            "viewerCannotUpdateReasons": [],
            "viewerDidAuthor": true,
            "viewerSubscription": "SUBSCRIBED"
          }
        ]
      }
    }
  }
}
